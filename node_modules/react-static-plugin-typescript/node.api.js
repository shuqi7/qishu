"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
var fork_ts_checker_webpack_plugin_1 = __importDefault(require("fork-ts-checker-webpack-plugin"));
var convert_tsconfig_paths_to_webpack_aliases_1 = __importDefault(require("convert-tsconfig-paths-to-webpack-aliases"));
var typescript_1 = require("typescript");
;
exports.default = (function (options) {
    return {
        config: getReactStaticConfigExtender(),
        webpack: getWebpackConfigExtender(options),
    };
});
;
function getWebpackConfigExtender(options) {
    var tsconfigLocation = typescript_1.findConfigFile('./', typescript_1.sys.fileExists);
    var tsconfigPath = tsconfigLocation ? path_1.default.resolve(tsconfigLocation) : tsconfigLocation;
    var parsedTsConfig = (tsconfigPath)
        ? typescript_1.parseConfigFileTextToJson(tsconfigPath, fs_1.readFileSync(tsconfigPath, 'utf8'))
        : { config: {} };
    var tsAliases = (parsedTsConfig.config.compilerOptions && parsedTsConfig.config.compilerOptions.paths)
        ? convert_tsconfig_paths_to_webpack_aliases_1.default(parsedTsConfig.config)
        : {};
    return function (previousConfig, args) {
        var previousModuleConfig = previousConfig.module || {};
        var previousResolveConfig = previousConfig.resolve || {};
        var previousResolveExtensions = previousResolveConfig.extensions || [];
        var typescriptLoader = getTypeScriptLoader(args.defaultLoaders.jsLoader);
        var plugins = previousConfig.plugins || [];
        if ((options || {}).typeCheck !== false) {
            plugins.push(getTypecheckPlugin(tsconfigPath));
        }
        var loaders = (Array.isArray(previousModuleConfig.rules)
            && previousModuleConfig.rules.length > 0
            && Array.isArray(previousModuleConfig.rules[0].oneOf))
            ? previousModuleConfig.rules[0].oneOf.slice() : [args.defaultLoaders.jsLoader, args.defaultLoaders.jsLoaderExt, args.defaultLoaders.cssLoader, args.defaultLoaders.fileLoader];
        if (loaders.indexOf(args.defaultLoaders.jsLoader) !== -1) {
            // If the default Javascript loader is still present, replace it with the TypeScript loader:
            loaders[loaders.indexOf(args.defaultLoaders.jsLoader)] = typescriptLoader;
        }
        else {
            // Otherwise just add the TypeScript loader to the list of loaders, before the others:
            loaders.unshift(typescriptLoader);
        }
        return __assign({}, previousConfig, { plugins: plugins, resolve: __assign({}, previousResolveConfig, { extensions: previousResolveExtensions.concat(['.ts', '.tsx']), alias: __assign({}, previousResolveConfig.alias, tsAliases) }), module: __assign({}, previousModuleConfig, { rules: [{
                        oneOf: loaders,
                    }] }) });
    };
}
function getReactStaticConfigExtender() {
    return function (previousConfig) {
        return __assign({}, previousConfig, { extensions: previousConfig.extensions.concat(['.ts', '.tsx']) });
    };
}
function getTypeScriptLoader(jsLoader) {
    var jsLoaderBabelPresets = jsLoader.use[0].options.presets || [];
    var typescriptLoader = __assign({}, jsLoader, { test: /\.(js|jsx|ts|tsx)$/, use: [
            __assign({}, jsLoader.use[0], { options: __assign({}, jsLoader.use[0].options, { presets: jsLoaderBabelPresets.concat('@babel/preset-typescript') }) }),
        ] });
    return typescriptLoader;
}
function getTypecheckPlugin(tsconfigPath) {
    return new fork_ts_checker_webpack_plugin_1.default({
        async: false,
        checkSyntacticErrors: true,
        tsconfig: tsconfigPath,
    });
}
