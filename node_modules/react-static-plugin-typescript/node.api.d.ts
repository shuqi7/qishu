import { Configuration as WebpackConfiguration, RuleSetRule, RuleSetLoader } from 'webpack';
interface Options {
    typeCheck?: boolean;
    tsconfig?: string;
}
declare const _default: (options?: Options | undefined) => {
    config: (previousConfig: ReactStaticConfig) => {
        extensions: string[];
    };
    webpack: (previousConfig: WebpackConfiguration, args: ReactStaticArgs) => {
        plugins: import("webpack").Plugin[];
        resolve: {
            extensions: string[];
            alias: {};
            modules?: string[] | undefined;
            descriptionFiles?: string[] | undefined;
            mainFields?: string[] | string[][] | undefined;
            aliasFields?: string[] | string[][] | undefined;
            mainFiles?: string[] | undefined;
            enforceExtension?: boolean | undefined;
            unsafeCache?: boolean | {} | undefined;
            plugins?: import("webpack").ResolvePlugin[] | undefined;
            symlinks?: boolean | undefined;
            cacheWithContext?: boolean | undefined;
        };
        module: any;
        mode?: "development" | "production" | "none" | undefined;
        name?: string | undefined;
        context?: string | undefined;
        entry?: string | string[] | import("webpack").Entry | import("webpack").EntryFunc | undefined;
        devtool?: boolean | "eval" | "inline-source-map" | "cheap-eval-source-map" | "cheap-source-map" | "cheap-module-eval-source-map" | "cheap-module-source-map" | "eval-source-map" | "source-map" | "nosources-source-map" | "hidden-source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "@eval" | "@inline-source-map" | "@cheap-eval-source-map" | "@cheap-source-map" | "@cheap-module-eval-source-map" | "@cheap-module-source-map" | "@eval-source-map" | "@source-map" | "@nosources-source-map" | "@hidden-source-map" | "#eval" | "#inline-source-map" | "#cheap-eval-source-map" | "#cheap-source-map" | "#cheap-module-eval-source-map" | "#cheap-module-source-map" | "#eval-source-map" | "#source-map" | "#nosources-source-map" | "#hidden-source-map" | "#@eval" | "#@inline-source-map" | "#@cheap-eval-source-map" | "#@cheap-source-map" | "#@cheap-module-eval-source-map" | "#@cheap-module-source-map" | "#@eval-source-map" | "#@source-map" | "#@nosources-source-map" | "#@hidden-source-map" | undefined;
        output?: import("webpack").Output | undefined;
        resolveLoader?: import("webpack").ResolveLoader | undefined;
        externals?: string | RegExp | import("webpack").ExternalsObjectElement | import("webpack").ExternalsFunctionElement | import("webpack").ExternalsElement[] | undefined;
        target?: "web" | "webworker" | "node" | "async-node" | "node-webkit" | "atom" | "electron" | "electron-renderer" | "electron-main" | ((compiler?: any) => void) | undefined;
        bail?: boolean | undefined;
        profile?: boolean | undefined;
        cache?: boolean | object | undefined;
        watch?: boolean | undefined;
        watchOptions?: import("webpack").ICompiler.WatchOptions | undefined;
        debug?: boolean | undefined;
        node?: false | import("webpack").Node | undefined;
        amd?: {
            [moduleName: string]: boolean;
        } | undefined;
        recordsPath?: string | undefined;
        recordsInputPath?: string | undefined;
        recordsOutputPath?: string | undefined;
        stats?: boolean | "verbose" | "none" | "errors-only" | "minimal" | "normal" | import("webpack").Stats.ToStringOptionsObject | undefined;
        performance?: false | import("webpack").Options.Performance | undefined;
        parallelism?: number | undefined;
        optimization?: import("webpack").Options.Optimization | undefined;
    };
};
export default _default;
interface ReactStaticArgs {
    stage: 'prod' | 'dev' | 'node';
    defaultLoaders: {
        jsLoader: RuleSetRule & {
            use: Array<RuleSetLoader & {
                options: object;
            }>;
        };
        jsLoaderExt: RuleSetRule;
        cssLoader: RuleSetRule;
        fileLoader: RuleSetRule;
    };
}
declare type ReactStaticConfig = {
    extensions: string[];
};
