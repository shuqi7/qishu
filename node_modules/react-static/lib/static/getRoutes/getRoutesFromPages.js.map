{"version":3,"sources":["../../../src/static/getRoutes/getRoutesFromPages.js"],"names":["watcher","routesCache","subscription","config","opts","globExtensions","extensions","map","ext","slice","join","pagesGlob","paths","PAGES","handle","pages","routes","page","nodePath","resolve","component","relative","ROOT","path","replace","split","isPage","dev","chokidar","watch","ignoreInitial","on","type","file","includes","filename","basename","startsWith","getRoutesFromPages"],"mappings":"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","sourcesContent":["import nodePath from 'path'\nimport chokidar from 'chokidar'\n\nimport { glob, debounce } from '../../utils'\n\nlet watcher\nlet routesCache\n\nexport default (async function getRoutesFromPages(\n  { config, opts = {} },\n  subscription\n) {\n  // Make a glob extension to get all pages with the set extensions from the pages directory\n  const globExtensions = config.extensions\n    .map(ext => `${ext.slice(1)}`)\n    .join(',')\n  const pagesGlob = `${config.paths.PAGES}/**/*.{${globExtensions}}`\n  // Get the pages\n\n  const handle = pages => {\n    // Turn each page into a route\n    const routes = pages.map(page => {\n      // Glob path will always have unix style path, convert to windows if necessary\n      page = nodePath.resolve(page)\n      // Get the component path relative to ROOT\n      const component = nodePath.relative(config.paths.ROOT, page)\n      // Make sure the path is relative to the root of the site\n      let path = page.replace(`${config.paths.PAGES}`, '').replace(/\\..*/, '')\n      // turn windows paths back to unix\n      path = path.split('\\\\').join('/')\n      // Turn `/index` paths into roots`\n      path = path.replace(/\\/index$/, '/')\n      // Return the route\n      return {\n        path,\n        component,\n        isPage: true, // tag it with isPage, so we know its origin\n      }\n    })\n    return routes\n  }\n\n  if (opts.dev && !watcher) {\n    watcher = chokidar\n      .watch(config.paths.PAGES, {\n        ignoreInitial: true,\n      })\n      .on(\n        'all',\n        debounce(async (type, file) => {\n          if (!['add', 'unlink'].includes(type)) {\n            return\n          }\n          const filename = nodePath.basename(file)\n          if (filename.startsWith('.')) {\n            return\n          }\n          const pages = await glob(pagesGlob)\n          const routes = handle(pages)\n          routesCache = routes\n          subscription(routes)\n        }),\n        50\n      )\n  }\n  if (routesCache) {\n    return subscription(routesCache)\n  }\n  const pages = await glob(pagesGlob)\n  const routes = handle(pages)\n  return subscription(routes)\n})\n"],"file":"getRoutesFromPages.js"}