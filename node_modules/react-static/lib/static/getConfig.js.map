{"version":3,"sources":["../../src/static/getConfig.js"],"names":["defaultConfig","DEFAULT_NAME_FOR_STATIC_CONFIG_FILE","DEFAULT_PATH_FOR_STATIC_CONFIG","nodePath","resolve","join","process","cwd","DEFAULT_ROUTES","path","DEFAULT_ENTRY","DEFAULT_EXTENSIONS","buildConfig","config","paths","root","src","dist","temp","buildArtifacts","devDist","public","plugins","pages","nodeModules","assets","resolvePath","relativePath","DIST","env","REACT_STATIC_ENV","ASSETS","ROOT","LOCAL_NODE_MODULES","SRC","PAGES","PLUGINS","TEMP","BUILD_ARTIFACTS","PUBLIC","NODE_MODULES","EXCLUDE_MODULES","excludeResolvedModules","PACKAGE","HTML_TEMPLATE","STATIC_DATA","siteRoot","basePath","devBasePath","REACT_STATIC_STAGING","stagingSiteRoot","stagingBasePath","publicPath","assetsPath","DEFAULT_ENTRY_PATH","entry","resolveModule","getSiteData","prefetchRate","maxThreads","Infinity","disableRoutePrefixing","outputFileRate","extensions","getRoutes","minLoadTime","disablePreload","disableRuntime","preloadPollInterval","babelExcludes","extractCssChunks","inlineCss","REACT_STATIC_MIN_LOAD_TIME","REACT_STATIC_PREFETCH_RATE","REACT_STATIC_DISABLE_ROUTE_PREFIXING","REACT_STATIC_DISABLE_PRELOAD","REACT_STATIC_DISABLE_RUNTIME","REACT_STATIC_PRELOAD_POLL_INTERVAL","REACT_STATIC_TEMPLATES_PATH","REACT_STATIC_PLUGINS_PATH","REACT_STATIC_UNIVERSAL_PATH","require","resolvePlugin","originalLocation","options","Array","isArray","location","fs","pathExistsSync","found","includes","err","NODE_ENV","reduce","prev","curr","Error","nodeLocation","browserLocation","getHooks","default","resolvedPlugin","hooks","map","console","error","configHook","buildConfigFromPath","configPath","cache","subscription","resolvedPath","noConfig","Promise","chokidar","watch","on","getConfig","ext","find"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n\nimport nodePath from 'path'\nimport chokidar from 'chokidar'\nimport resolveFrom from 'resolve-from'\nimport fs from 'fs-extra'\n\nimport getDirname from '../utils/getDirname'\nimport {\n  cleanSlashes,\n  cutPathToRoot,\n  isAbsoluteUrl,\n  makeHookReducer,\n} from '../utils'\n\n// the default static.config.js location\nconst defaultConfig = {}\nconst DEFAULT_NAME_FOR_STATIC_CONFIG_FILE = 'static.config'\nconst DEFAULT_PATH_FOR_STATIC_CONFIG = nodePath.resolve(\n  nodePath.join(process.cwd(), DEFAULT_NAME_FOR_STATIC_CONFIG_FILE)\n)\nconst DEFAULT_ROUTES = [{ path: '/' }]\nconst DEFAULT_ENTRY = 'index'\nconst DEFAULT_EXTENSIONS = ['.js', '.jsx']\n\nexport const buildConfig = async (config = {}) => {\n  // path defaults\n  config.paths = {\n    root: nodePath.resolve(process.cwd()),\n    src: 'src',\n    dist: 'dist',\n    temp: 'tmp',\n    buildArtifacts: 'artifacts',\n    devDist: 'tmp/dev-server',\n    public: 'public',\n    plugins: 'plugins',\n    pages: 'src/pages',\n    nodeModules: 'node_modules',\n    assets: '',\n    ...(config.paths || {}),\n  }\n\n  // Use the root to resolve all other relative paths\n  const resolvePath = relativePath =>\n    nodePath.resolve(config.paths.root, relativePath)\n\n  // Resolve all paths\n  const DIST =\n    process.env.REACT_STATIC_ENV === 'development'\n      ? resolvePath(config.paths.devDist || config.paths.dist)\n      : resolvePath(config.paths.dist)\n\n  const ASSETS = nodePath.resolve(DIST, config.paths.assets)\n\n  const paths = {\n    ROOT: config.paths.root,\n    LOCAL_NODE_MODULES: nodePath.resolve(getDirname(), '../../node_modules'),\n    SRC: resolvePath(config.paths.src),\n    PAGES: resolvePath(config.paths.pages),\n    DIST,\n    ASSETS,\n    PLUGINS: resolvePath(config.paths.plugins),\n    TEMP: resolvePath(config.paths.temp),\n    BUILD_ARTIFACTS: resolvePath(config.paths.buildArtifacts),\n    PUBLIC: resolvePath(config.paths.public),\n    NODE_MODULES: resolvePath(config.paths.nodeModules),\n    EXCLUDE_MODULES:\n      config.paths.excludeResolvedModules ||\n      resolvePath(config.paths.nodeModules),\n    PACKAGE: resolvePath('package.json'),\n    HTML_TEMPLATE: nodePath.join(DIST, 'index.html'),\n    STATIC_DATA: nodePath.join(ASSETS, 'staticData'),\n  }\n\n  let siteRoot = ''\n  let basePath = ''\n\n  if (process.env.REACT_STATIC_ENV === 'development') {\n    basePath = cleanSlashes(config.devBasePath)\n  } else if (process.env.REACT_STATIC_STAGING === 'true') {\n    siteRoot = cutPathToRoot(config.stagingSiteRoot, '$1')\n    basePath = cleanSlashes(config.stagingBasePath)\n  } else {\n    siteRoot = cutPathToRoot(config.siteRoot, '$1')\n    basePath = cleanSlashes(config.basePath)\n  }\n\n  const publicPath = `${cleanSlashes(`${siteRoot}/${basePath}`)}/`\n\n  let assetsPath = cleanSlashes(config.assetsPath || paths.assets)\n  if (assetsPath && !isAbsoluteUrl(assetsPath)) {\n    assetsPath = `/${cleanSlashes(`${basePath}/${assetsPath}`)}/`\n  }\n\n  // Add the project root as a plugin. This allows the dev\n  // to use the plugin api directory in their project if they want\n  const plugins = [...(config.plugins || []), paths.ROOT]\n\n  const DEFAULT_ENTRY_PATH = nodePath.join(paths.SRC, DEFAULT_ENTRY)\n\n  // Defaults\n  config = {\n    // Defaults\n    entry:\n      resolveModule(DEFAULT_ENTRY_PATH, config) || `${DEFAULT_ENTRY_PATH}.js`,\n    getSiteData: () => ({}),\n    prefetchRate: 5,\n    maxThreads: Infinity,\n    disableRoutePrefixing: false,\n    outputFileRate: 100,\n    extensions: DEFAULT_EXTENSIONS,\n    getRoutes: async () => DEFAULT_ROUTES,\n    minLoadTime: 200,\n    disablePreload: false,\n    disableRuntime: false,\n    preloadPollInterval: 300,\n    // Config Overrides\n    ...config,\n    // Materialized Overrides\n    plugins,\n    paths,\n    babelExcludes: config.babelExcludes || [],\n    siteRoot,\n    basePath,\n    publicPath,\n    assetsPath,\n    extractCssChunks: config.extractCssChunks || false,\n    inlineCss: config.inlineCss || false,\n  }\n\n  // Set env variables to be used client side\n  process.env.REACT_STATIC_MIN_LOAD_TIME = config.minLoadTime\n  process.env.REACT_STATIC_PREFETCH_RATE = config.prefetchRate\n  process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING =\n    config.disableRoutePrefixing\n  process.env.REACT_STATIC_DISABLE_PRELOAD = config.disablePreload\n  process.env.REACT_STATIC_DISABLE_RUNTIME = config.disableRuntime\n  process.env.REACT_STATIC_PRELOAD_POLL_INTERVAL = config.preloadPollInterval\n\n  process.env.REACT_STATIC_TEMPLATES_PATH = nodePath.join(\n    paths.BUILD_ARTIFACTS,\n    'react-static-templates.js'\n  )\n  process.env.REACT_STATIC_PLUGINS_PATH = nodePath.join(\n    paths.BUILD_ARTIFACTS,\n    'react-static-browser-plugins.js'\n  )\n  process.env.REACT_STATIC_UNIVERSAL_PATH = require.resolve(\n    'react-universal-component'\n  )\n\n  const resolvePlugin = originalLocation => {\n    let options = {}\n    if (Array.isArray(originalLocation)) {\n      options = originalLocation[1] || {}\n      originalLocation = originalLocation[0]\n    }\n\n    const location = [\n      () => {\n        // Absolute\n        if (fs.pathExistsSync(originalLocation)) {\n          return originalLocation\n        }\n      },\n      () => {\n        // Absolute require\n        try {\n          const found = require.resolve(originalLocation)\n          return found.includes('.') ? nodePath.resolve(found, '../') : found\n        } catch (err) {\n          //\n        }\n      },\n      () => {\n        // Plugins Dir\n        const found = nodePath.resolve(paths.PLUGINS, originalLocation)\n        if (fs.pathExistsSync(found)) {\n          return found\n        }\n      },\n      () => {\n        // Plugins Dir require\n        try {\n          const found = resolveFrom(paths.PLUGINS, originalLocation)\n          return found.includes('.') ? nodePath.resolve(found, '../') : found\n        } catch (err) {\n          //\n        }\n      },\n      () => {\n        // CWD\n        const found = nodePath.resolve(process.cwd(), originalLocation)\n        if (fs.pathExistsSync(found)) {\n          return found\n        }\n      },\n      () => {\n        // CWD require\n        try {\n          const found = resolveFrom(process.cwd(), originalLocation)\n          return found.includes('.') ? nodePath.resolve(found, '../') : found\n        } catch (err) {\n          //\n        }\n      },\n      () => {\n        if (process.env.NODE_ENV === 'test') {\n          // Allow plugins to be mocked\n          return 'mock-plugin'\n        }\n      },\n    ].reduce((prev, curr) => prev || curr(), null)\n\n    // TODO: We have to do this because we don't have a good mock for process.cwd() :(\n    if (!location) {\n      throw new Error(\n        `Oh crap! Could not find a plugin directory for the plugin: \"${location}\". We must bail!`\n      )\n    }\n\n    const nodeLocation = resolveModule(\n      nodePath.join(location, 'node.api'),\n      config\n    )\n    const browserLocation = resolveModule(\n      nodePath.join(location, 'browser.api'),\n      config\n    )\n    let getHooks = () => ({})\n\n    try {\n      // Get the hooks for the node api\n      if (nodeLocation) {\n        getHooks = require(nodeLocation).default\n      }\n\n      const resolvedPlugin = {\n        location,\n        nodeLocation,\n        browserLocation,\n        options,\n        hooks: getHooks(options) || {},\n      }\n\n      // Recursively resolve plugins\n      if (resolvedPlugin.plugins) {\n        resolvedPlugin.plugins = resolvedPlugin.plugins.map(resolvePlugin)\n      }\n\n      return resolvedPlugin\n    } catch (err) {\n      console.error(\n        `The following error occurred in the plugin located at \"${nodeLocation}\"`\n      )\n      throw err\n    }\n  }\n\n  config.plugins = config.plugins.map(resolvePlugin)\n\n  const configHook = makeHookReducer(config.plugins, 'config')\n  config = await configHook(config)\n\n  return config\n}\n\nconst buildConfigFromPath = async configPath => {\n  delete require.cache[configPath]\n  const config = require(configPath).default\n  return buildConfig(config)\n}\n\n// Retrieves the static.config.js from the current project directory\nexport default (async function getConfig(\n  configPath = DEFAULT_PATH_FOR_STATIC_CONFIG,\n  subscription\n) {\n  const resolvedPath = resolveModule(configPath)\n\n  const noConfig =\n    configPath === DEFAULT_PATH_FOR_STATIC_CONFIG && !resolvedPath\n\n  if (noConfig) {\n    if (subscription) {\n      return new Promise(async () => {\n        subscription(await buildConfig(defaultConfig))\n      })\n    }\n    return buildConfig(defaultConfig)\n  }\n\n  const config = await buildConfigFromPath(resolvedPath || configPath)\n\n  if (subscription) {\n    // If subscribing, return a never ending promise\n    return new Promise(() => {\n      chokidar.watch(resolvedPath).on('all', async () => {\n        subscription(await buildConfigFromPath(resolvedPath))\n      })\n    })\n  }\n\n  return config\n})\n\nfunction resolveModule(path, config) {\n  try {\n    // Load any module extension that is supported by Node (.js, .mjs, .node, etc),\n    // or that have been registered via Node require hooks (.jsx, .ts, etc)\n    return require.resolve(path)\n  } catch {\n    // Fallback to the extensions that have been registered with Babel\n    const extensions = (config && config.extensions) || DEFAULT_EXTENSIONS\n    return extensions.map(ext => path + ext).find(fs.pathExistsSync)\n  }\n}\n"],"file":"getConfig.js"}