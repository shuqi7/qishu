{"version":3,"sources":["../../src/static/buildHTML.js"],"names":["cores","Math","max","OS","cpus","length","oldConfig","config","siteData","clientStats","incremental","routes","chalk","green","paths","DIST","startsWith","ROOT","process","env","NODE_PATH","NODE_MODULES","require","Module","_initPaths","maxThreads","console","log","threads","min","htmlProgress","exporters","i","push","resolve","REACT_STATIC_SLAVE","stdio","exporterRoutes","map","forEach","route","Promise","all","exporter","reject","send","on","type","payload","tick","buildHTML"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASC,YAAGC,IAAH,GAAUC,MAAnB,EAA2B,CAA3B,CAAd;;;;;;;4BAEgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,SADM,QACdC,MADc,EAEdC,QAFc,QAEdA,QAFc,EAGdC,WAHc,QAGdA,WAHc,EAIdC,WAJc,QAIdA,WAJc;AAMNC,YAAAA,MANM,GAMgBL,SANhB,CAMNK,MANM,EAMKJ,MANL,4BAMgBD,SANhB;AAOd,6BAAKM,eAAMC,KAAN,CAAY,2BAAZ,CAAL,EAPc,CASd;;AACA,gBAAI,CAACN,MAAM,CAACO,KAAP,CAAaC,IAAb,CAAkBC,UAAlB,CAA6BT,MAAM,CAACO,KAAP,CAAaG,IAA1C,CAAL,EAAsD;AACpDC,cAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,GAAwBb,MAAM,CAACO,KAAP,CAAaO,YAArC;;AACAC,cAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyBC,UAAzB;AACD,aAba,CAed;;;AAfc,kBAgBVjB,MAAM,CAACkB,UAAP,IAAqB,CAhBX;AAAA;AAAA;AAAA;;AAiBZC,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAjBY;AAAA,mBAkBN,uBAAS;AACbpB,cAAAA,MAAM,EAANA,MADa;AAEbI,cAAAA,MAAM,EAANA,MAFa;AAGbH,cAAAA,QAAQ,EAARA,QAHa;AAIbC,cAAAA,WAAW,EAAXA,WAJa;AAKbC,cAAAA,WAAW,EAAXA;AALa,aAAT,CAlBM;;AAAA;AAAA;AAAA;;AAAA;AA0BZ;AACMkB,YAAAA,OA3BM,GA2BI3B,IAAI,CAAC4B,GAAL,CAAS7B,KAAT,EAAgBO,MAAM,CAACkB,UAAvB,CA3BJ;AA4BNK,YAAAA,YA5BM,GA4BS,qBAASnB,MAAM,CAACN,MAAhB,CA5BT;AA6BZqB,YAAAA,OAAO,CAACC,GAAR,oCAAwC3B,KAAxC;AAEM+B,YAAAA,SA/BM,GA+BM,EA/BN;;AAgCZ,iBAASC,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAAGJ,OAApB,EAA6BI,EAAC,EAA9B,EAAkC;AAChCD,cAAAA,SAAS,CAACE,IAAV,CACE,yBAAKX,OAAO,CAACY,OAAR,CAAgB,qBAAhB,CAAL,EAA6C,EAA7C,EAAiD;AAC/Cf,gBAAAA,GAAG,oBACED,OAAO,CAACC,GADV;AAEDgB,kBAAAA,kBAAkB,EAAE;AAFnB,kBAD4C;AAK/CC,gBAAAA,KAAK,EAAE;AALwC,eAAjD,CADF;AASD;;AAEKC,YAAAA,cA5CM,GA4CWN,SAAS,CAACO,GAAV,CAAc;AAAA,qBAAM,EAAN;AAAA,aAAd,CA5CX;AA8CZ3B,YAAAA,MAAM,CAAC4B,OAAP,CAAe,UAACC,KAAD,EAAQR,CAAR,EAAc;AAC3BK,cAAAA,cAAc,CAACL,CAAC,GAAGK,cAAc,CAAChC,MAApB,CAAd,CAA0C4B,IAA1C,CAA+CO,KAA/C;AACD,aAFD;AA9CY;AAAA,mBAkDNC,OAAO,CAACC,GAAR,CACJX,SAAS,CAACO,GAAV,CAAc,UAACK,QAAD,EAAWX,CAAX,EAAiB;AAC7B,kBAAMrB,MAAM,GAAG0B,cAAc,CAACL,CAAD,CAA7B;AACA,qBAAO,IAAIS,OAAJ,CAAY,UAACP,OAAD,EAAUU,MAAV,EAAqB;AACtCD,gBAAAA,QAAQ,CAACE,IAAT,CAAc;AACZtC,kBAAAA,MAAM,EAANA,MADY;AAEZI,kBAAAA,MAAM,EAANA,MAFY;AAGZH,kBAAAA,QAAQ,EAARA,QAHY;AAIZC,kBAAAA,WAAW,EAAXA,WAJY;AAKZC,kBAAAA,WAAW,EAAXA;AALY,iBAAd;AAOAiC,gBAAAA,QAAQ,CAACG,EAAT,CAAY,SAAZ,EAAuB,iBAAuB;AAAA,sBAApBC,IAAoB,SAApBA,IAAoB;AAAA,sBAAdC,OAAc,SAAdA,OAAc;;AAC5C,sBAAID,IAAI,KAAK,OAAb,EAAsB;AACpBH,oBAAAA,MAAM,CAACI,OAAD,CAAN;AACD;;AACD,sBAAID,IAAI,KAAK,KAAb,EAAoB;AAAA;;AAClB,gCAAArB,OAAO,EAACC,GAAR,oCAAeqB,OAAf;AACD;;AACD,sBAAID,IAAI,KAAK,MAAb,EAAqB;AACnBjB,oBAAAA,YAAY,CAACmB,IAAb;AACD;;AACD,sBAAIF,IAAI,KAAK,MAAb,EAAqB;AACnBb,oBAAAA,OAAO;AACR;AACF,iBAbD;AAcD,eAtBM,CAAP;AAuBD,aAzBD,CADI,CAlDM;;AAAA;AAgFd,gCAAQtB,eAAMC,KAAN,CAAY,2BAAZ,CAAR;;AAhFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeqC,S;;;;SAAAA,S;;;;;;;;;;;;;;;0BAFzBlD,K","sourcesContent":["import OS from 'os'\nimport { fork } from 'child_process'\nimport chalk from 'chalk'\nimport { progress, time, timeEnd } from '../utils'\nimport exporter from './exporter'\n\nconst cores = Math.max(OS.cpus().length, 1)\n\nexport default (async function buildHTML({\n  config: oldConfig,\n  siteData,\n  clientStats,\n  incremental,\n}) {\n  const { routes, ...config } = oldConfig\n  time(chalk.green('=> [\\u2713] HTML Exported'))\n\n  // in case of an absolute path for DIST we must tell node to load the modules from our project root\n  if (!config.paths.DIST.startsWith(config.paths.ROOT)) {\n    process.env.NODE_PATH = config.paths.NODE_MODULES\n    require('module').Module._initPaths()\n  }\n\n  // Single threaded export\n  if (config.maxThreads <= 1) {\n    console.log('=> Exporting HTML...')\n    await exporter({\n      config,\n      routes,\n      siteData,\n      clientStats,\n      incremental,\n    })\n  } else {\n    // Multi-threaded export\n    const threads = Math.min(cores, config.maxThreads)\n    const htmlProgress = progress(routes.length)\n    console.log(`=> Exporting HTML across ${cores} threads...`)\n\n    const exporters = []\n    for (let i = 0; i < threads; i++) {\n      exporters.push(\n        fork(require.resolve('./exporter.threaded'), [], {\n          env: {\n            ...process.env,\n            REACT_STATIC_SLAVE: 'true',\n          },\n          stdio: 'inherit',\n        })\n      )\n    }\n\n    const exporterRoutes = exporters.map(() => [])\n\n    routes.forEach((route, i) => {\n      exporterRoutes[i % exporterRoutes.length].push(route)\n    })\n\n    await Promise.all(\n      exporters.map((exporter, i) => {\n        const routes = exporterRoutes[i]\n        return new Promise((resolve, reject) => {\n          exporter.send({\n            config,\n            routes,\n            siteData,\n            clientStats,\n            incremental,\n          })\n          exporter.on('message', ({ type, payload }) => {\n            if (type === 'error') {\n              reject(payload)\n            }\n            if (type === 'log') {\n              console.log(...payload)\n            }\n            if (type === 'tick') {\n              htmlProgress.tick()\n            }\n            if (type === 'done') {\n              resolve()\n            }\n          })\n        })\n      })\n    )\n  }\n\n  timeEnd(chalk.green('=> [\\u2713] HTML Exported'))\n})\n"],"file":"buildHTML.js"}